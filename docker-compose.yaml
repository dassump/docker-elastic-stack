name: elastic-stack

x-common-limits: &common-limits
  cpus: 1
  mem_limit: 1G

x-common-healthcheck: &common-healthcheck
  interval: 10s
  timeout: 10s
  retries: 30

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    environment:
      ELASTIC_PASSWORD: elastic@pass
      discovery.type: single-node
      bootstrap.memory_lock: true
      cluster.name: elastic
      cluster.routing.allocation.disk.threshold_enabled: false
      xpack.license.self_generated.type: basic
      xpack.security.enabled: true
      xpack.monitoring.collection.enabled: true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    <<: *common-limits
    healthcheck:
      <<: *common-healthcheck
      test: [
        "CMD-SHELL",
        "curl -s http://localhost:9200 | grep -q 'missing authentication credentials'",
      ]
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    environment:
      TELEMETRY_ENABLED: false
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: kibana@pass
      XPACK_FLEET_AGENTS_FLEET_SERVER_HOSTS: '["http://elastic-agent:8220"]'
      XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    volumes:
      - kibana:/usr/share/kibana/data
    ports:
      - 5601:5601
    <<: *common-limits
    healthcheck:
      <<: *common-healthcheck
      test: [
        "CMD-SHELL",
        "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
      ]
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy

  elastic-agent:
    image: docker.elastic.co/beats/elastic-agent:8.10.2
    privileged: true
    user: root
    environment:
      FLEET_SERVER_ENABLE: true
      FLEET_SERVER_POLICY_ID: elastic-agent
      FLEET_SERVER_ELASTICSEARCH_HOST: http://elasticsearch:9200
      KIBANA_HOST: http://kibana:5601
      KIBANA_USERNAME: elastic
      KIBANA_PASSWORD: elastic@pass
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - 8220:8220
      - 8200:8200
    <<: *common-limits
    healthcheck:
      <<: *common-healthcheck
      test: [
        "CMD-SHELL",
        "curl -s -k https://localhost:8220/api/status | grep -q 'HEALTHY'",
      ]
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  elastic-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    command:
      - sh
      - -c
      - |
        until curl -s \
            -X GET $${ELASTICSEARCH_HOST} \
            | grep -q "missing authentication credentials"; \
            do sleep 10; echo "waiting for elasticsearch..."; done;
            echo "elasticsearch OK"

          until curl -s \
            -H "Content-Type: application/json" \
            -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" \
            -X POST $${ELASTICSEARCH_HOST}/_security/user/$${KIBANA_USERNAME}/_password \
            -d '{
              "password": "'$${KIBANA_PASSWORD}'"
            }' \
            | grep -q "^{}"; \
            do sleep 10; echo "waiting for $${KIBANA_USERNAME} password set..."; done;
            echo "kibana_system password OK"

          until curl -s \
            -H "Content-Type: application/json" -H "kbn-xsrf: true" \
            -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" \
            -X POST "$${KIBANA_HOST}/api/fleet/agent_policies?sys_monitoring=true" \
            -d '{
              "id": "elastic-agent",
              "name": "Elastic Agent",
              "description": "",
              "namespace": "default",
              "monitoring_enabled": ["logs", "metrics"]
            }' \
            | grep -q -e "^{\"item\":{\"id\":\"elastic-agent\"" -e "'elastic-agent' already exists"; \
            do sleep 10; echo "waiting for elastic-agent agent policy..."; done;
            echo "elastic-agent policy OK"

          until curl -s \
            -H "Content-Type: application/json" -H "kbn-xsrf: true" \
            -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" \
            -X POST $${KIBANA_HOST}/api/fleet/package_policies \
            -d '{
              "id": "fleet_server-1",
              "name": "fleet_server-1",
              "policy_id": "elastic-agent",
              "package": {"name": "fleet_server", "version": "1.3.1"}
            }' \
            | grep -q -e "^{\"item\":{\"id\":\"fleet_server-1\"" -e "fleet_server-1 already exists"; \
            do sleep 10; echo "waiting for fleet_server-1 package policy..."; done;
            echo "fleet_server package policy OK"

          until curl -s \
            -H "Content-Type: application/json" -H "kbn-xsrf: true" \
            -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" \
            -X POST $${KIBANA_HOST}/api/fleet/package_policies \
            -d '{
              "id": "docker-1",
              "name": "docker-1",
              "policy_id": "elastic-agent",
              "package": {"name": "docker", "version": "2.8.1"}
            }' \
            | grep -q -e "^{\"item\":{\"id\":\"docker-1\"" -e "docker-1 already exists"; \
            do sleep 10; echo "waiting for docker-1 package policy..."; done;
            echo "docker-1 package policy OK"

          until curl -s \
            -H "Content-Type: application/json" -H "kbn-xsrf: true" \
            -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" \
            -X POST $${KIBANA_HOST}/api/fleet/package_policies \
            -d '{
              "id": "apm-1",
              "name": "apm-1",
              "policy_id": "elastic-agent",
              "package": {"name": "apm", "title": "Elastic APM", "version": "8.10.2"},
              "inputs": [{
                "type": "apm",
                "policy_template": "apmserver",
                "enabled": true,
                "streams": [],
                "vars": {
                  "host": {"value": "0.0.0.0:8200", "type": "text"},
                  "url": {"value": "http://elastic-agent:8200", "type": "text"},
                  "secret_token": {"type": "text"},
                  "api_key_enabled": {"value": false, "type": "bool"},
                  "enable_rum": {"value": false, "type": "bool"},
                  "anonymous_enabled": {"value": false, "type": "bool"},
                  "anonymous_allow_agent": {"value": ["rum-js","js-base","iOS/swift"], "type": "text"},
                  "anonymous_allow_service": {"value": [], "type": "text"},
                  "anonymous_rate_limit_event_limit": {"value": 300, "type": "integer"},
                  "anonymous_rate_limit_ip_limit": {"value": 1000, "type": "integer"},
                  "default_service_environment": {"type": "text"},
                  "rum_allow_origins": {"value": ["\"*\""], "type": "text"},
                  "rum_allow_headers": {"value": [], "type": "text"},
                  "rum_response_headers": {"type": "yaml"},
                  "rum_library_pattern": {"value": "\"node_modules|bower_components|~\"", "type": "text"},
                  "rum_exclude_from_grouping": {"value": "\"^/webpack\"", "type": "text"},
                  "api_key_limit": {"value": 100, "type": "integer"},
                  "max_event_bytes": {"value": 307200, "type": "integer"},
                  "capture_personal_data": {"value": true, "type": "bool"},
                  "max_header_bytes": {"value": 1048576, "type": "integer"},
                  "idle_timeout": {"value": "45s", "type": "text"},
                  "read_timeout": {"value": "3600s", "type": "text"},
                  "shutdown_timeout": {"value": "30s", "type": "text"},
                  "write_timeout": {"value": "30s", "type": "text"},
                  "max_connections": {"value": 0, "type": "integer"},
                  "response_headers": {"type": "yaml"},
                  "expvar_enabled": {"value": false, "type": "bool"},
                  "pprof_enabled": {"value": false, "type": "bool"},
                  "java_attacher_discovery_rules": {"type": "yaml"},
                  "java_attacher_agent_version": {"type": "text"},
                  "java_attacher_enabled": {"value": false, "type": "bool"},
                  "tls_enabled": {"value": false,"type": "bool"},
                  "tls_certificate": {"type": "text"},
                  "tls_key": {"type": "text"},
                  "tls_supported_protocols": {"value": ["TLSv1.2","TLSv1.3"], "type": "text"},
                  "tls_cipher_suites": {"value": [], "type": "text"},
                  "tls_curve_types": {"value": [], "type": "text"},
                  "tail_sampling_policies": {"value": "- sample_rate: 0.1\n", "type": "yaml"},
                  "tail_sampling_interval": {"value": "1m", "type": "text"},
                  "tail_sampling_enabled": {"value": false, "type": "bool"},
                  "tail_sampling_storage_limit": {"value": "3GB", "type": "text"}
                }
              }]
            }' \
            | grep -q -e "^{\"item\":{\"id\":\"apm-1\"" -e "apm-1 already exists"; \
            do sleep 10; echo "waiting for apm-1 package policy..."; done;
            echo "apm-1 package policy OK"
    environment:
      ELASTICSEARCH_HOST: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic@pass
      KIBANA_HOST: http://kibana:5601
      KIBANA_USERNAME: kibana_system
      KIBANA_PASSWORD: kibana@pass
    <<: *common-limits
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

volumes:
  elasticsearch: {}
  kibana: {}
